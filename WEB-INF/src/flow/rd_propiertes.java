package flow;

import java.io.File;
import java.io.FileInputStream;

import java.io.IOException;
import java.util.Properties;

/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 26 DE FEVEREIRO DE 2023 19H40MIN23S BRT
 */
public class rd_propiertes extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 26 DE FEVEREIRO DE 2023 19H40MIN23S BRT
	 */
	public rd_propiertes() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 26 DE FEVEREIRO DE 2023 19H40MIN23S BRT
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {
		// Definimos variáveis ​​para armazenar os valores das propriedades
		
	    String mns="";
	    String audio="";
	    String exit="";
	    
	    // Definimos o caminho do arquivo de propriedades
	    
	    String dir=mySession.getAbsoluteProjectFilePath() + "\\data\\configCustom.properties";
	    
	    // Cria um objeto File a partir do caminho
	    
	    File file=new File(dir);
	    
	 // Verifica se o arquivo existe antes de tentar lê-lo
	    
	    if(file.exists()) {
	    	// Cria um objeto Properties para ler as propriedades do arquivo
	    	
	        Properties properties=new Properties();
	        
	        // Abrimos um FileInputStream para ler o arquivo de propriedades
	        
	        try (FileInputStream fileInputStream = new FileInputStream(file)) {
	        	// Carrega as propriedades do arquivo no objeto Properties
	        	
	            properties.load(fileInputStream);
	        } catch (IOException e) {
	        	// Se houver um erro ao ler o arquivo, lança uma exceção
	        	
	            throw new RuntimeException("Erro ao ler o arquivo de propriedades", e);
	        }

	        // Pega o valor da propriedade "message" e converte para boolean
	        
	        mns=properties.getProperty("mensagem");
	        boolean mnsBoolean=Boolean.parseBoolean(mns);
	        
	        // Pega o valor da propriedade "audio" e converte para int
	        
	        audio = properties.getProperty("audio");
	        int audioInt = 0;
	        try {
	            audioInt = Integer.parseInt(audio);
	        } catch (NumberFormatException e) {
	        	// Se houver um erro ao converter para int, imprimimos o erro
	        	
	            e.printStackTrace();
	        }

	        // Se o valor de "audio" for 12, obtemos o valor de "exit" e o convertemos em booleano
	        
	        if(audioInt==12) {
	            exit=properties.getProperty("exit");
	            boolean exitBoolean=Boolean.parseBoolean(exit);
	            
	         // Atribui o valor de "exit" à variável de sessão correspondente
	            
	            mySession.getVariable(IProjectVariables.SAIDA).getSimpleVariable().setValue(exitBoolean);
	        }
	        
	        // Atribui os valores de "mensagem" e "áudio" às variáveis ​​de sessão correspondentes
	        
	        mySession.getVariable(IProjectVariables.MNS).getSimpleVariable().setValue(mnsBoolean);
	        mySession.getVariable(IProjectVariables.AUDIO).getSimpleVariable().setValue(audioInt);
	    }
	}

	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 20 DE MARÇO DE 2023 14H58MIN2S BRT
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("ck_mnsCustom", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
