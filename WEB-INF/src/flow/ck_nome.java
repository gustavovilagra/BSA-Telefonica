package flow;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;

import java.net.URL;


import com.avaya.sce.runtimecommon.ITraceInfo;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;


/**
 * A basic servlet which allows a user to define their code, generate
 * any output, and to select where to transition to next.
 * Last generated by Orchestration Designer at: 4 DE MARÇO DE 2023 1H59MIN36S BRT
 */
public class ck_nome extends com.avaya.sce.runtime.BasicServlet {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 4 DE MARÇO DE 2023 1H59MIN36S BRT
	 */
	public ck_nome() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method allows for custom integration with other Java components.
	 * You may use Java for sophisticated logic or to integrate with custom
	 * connectors (i.e. JMS, custom web services, sockets, XML, JAXB, etc.)
	 *
	 * Any custom code added here should work as efficiently as possible to prevent delays.
	 * It's important to design your callflow so that the voice browser (Experienve Portal/IR)
	 * is not waiting too long for a response as this can lead to a poor caller experience.
	 * Additionally, if the response to the client voice browser exceeds the configured
	 * timeout, the platform may throw an "error.badfetch". 
	 *
	 * Using this method, you have access to all session variables through the 
	 * SCESession object.
	 *
	 * The code generator will *** NOT *** overwrite this method in the future.
	 * Last generated by Orchestration Designer at: 4 DE MARÇO DE 2023 1H59MIN36S BRT
	 */
	public void servletImplementation(com.avaya.sce.runtimecommon.SCESession mySession) {
	    ITraceInfo tr = mySession.getTraceOutput();

	    // Verificar se o rastreamento de aplicativo está habilitado
	    if (mySession.isAppTraceEnabled()) {
	        tr.writeln(ITraceInfo.TRACE_LEVEL_INFO, "AppTraceEnabled");
	    }
	    
	    

	    // Obter o valor do CPF da variável de sessão do projeto
	    String cpf = mySession.getVariable(IProjectVariables.PC__CPF)
	                            .getComplexVariable()
	                            .getField(IProjectVariables.PC__CPF_FIELD_VALUE)
	                            .getStringValue();
	    
	    // Cria um corpo JSON com o valor do CPF
	    JsonObject requestBody = new JsonObject();
	    requestBody.addProperty("cpf", cpf);
	    String body = new Gson().toJson(requestBody);
	    
	    
	    // Define a URL da API externa
        final String BASE_URL = "http://env-7401457.jelastic.saveincloud.net/SetNextCampaign/api";
        final String ENDPOINT = "/ConsultaCPF";
        String url = BASE_URL + ENDPOINT;
        
        
	    // Registra o CPF na saída de rastreamento
	    tr.writeln(ITraceInfo.TRACE_LEVEL_INFO, "CPF: " + cpf);

	    try {
	        // Cria uma conexão com a URL
	        URL obj = new URL(url);
	        HttpURLConnection postConnection = (HttpURLConnection) obj.openConnection();

	        // Configura a solicitação HTTP para usar o método POST e enviar e aceitar JSON
	        postConnection.setRequestMethod("POST");
	        postConnection.setRequestProperty("Content-Type", "application/json");
	        postConnection.setRequestProperty("Accept", "application/json");

	        // Habilita a saída de dados da solicitação HTTP e envia o corpo da solicitação
	        postConnection.setDoOutput(true);
	        OutputStream os = postConnection.getOutputStream();
	        os.write(body.getBytes());
	        os.flush();
	        os.close();

	        // Obter o código de resposta HTTP da API
	        int responseCode = postConnection.getResponseCode();
	        if (responseCode == HttpURLConnection.HTTP_OK) {

	            // lê a resposta da API e armazena em uma variável
	            BufferedReader in = new BufferedReader(new InputStreamReader(postConnection.getInputStream()));
	            StringBuilder response = new StringBuilder();
	            String line;
	            while ((line = in.readLine()) != null) {
	                response.append(line);
	            }
	            
	            in.close();
	            
	            // Imprime a resposta da API para fins de depuração
	            System.out.println("Resposta da API: " + response.toString());
	            
	            // Analisa a resposta JSON e extrai o que tiver dentro , se estiver presente
	            JsonParser parser = new JsonParser();
	            JsonObject json = parser.parse(response.toString()).getAsJsonObject();
	            
	            JsonObject Object = json.getAsJsonObject();
	            String crmId=Object.get("crm_id").getAsString();
                String accountId=Object.get("account_id").getAsString();
                String cardNo=Object.get("card_no").getAsString();
               
	            
	            if (json.has("data")) {
	                JsonObject dataObject = json.getAsJsonObject("data");
	                
	                String lastName=dataObject.get("last_name").getAsString();
                    String email=dataObject.get("email").getAsString();
                    String phone=dataObject.get("phone").getAsString();
                    String gender=dataObject.get("gender").getAsString();
                    String userName=dataObject.get("username").getAsString();
                    
             
                    
	                if (dataObject.has("first_name")) {
	                    String firstName = dataObject.get("first_name").getAsString();
	                   
	                    // Armazena o primeiro nome em uma variável de sessão
	                    mySession.getVariable(IProjectVariables.VALOR_NOME)
	                    .getSimpleVariable()
	                    .setValue(firstName);
	                    
	                    // Registra o primeiro nome no log de rastreamento
	                    tr.writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "O primeiro nome é: " + firstName);
	                    
	                    // Armazena valor booleano a variavel nomeValid, "true" se a variavel valorNome tiver conteudo "false" se estiver vazia
	                    if(IProjectVariables.VALOR_NOME.isEmpty()) {
	                    	mySession.getVariable(IProjectVariables.NOME_VALID).getSimpleVariable().setValue(false);
	                    }else {
	                    	mySession.getVariable(IProjectVariables.NOME_VALID).getSimpleVariable().setValue(true);
	                    }
	                    
	                    mySession.getVariable(IProjectVariables.CRM__ID).getSimpleVariable().setValue(crmId);
	                    
	                    mySession.getVariable(IProjectVariables.ACCOUNT__ID).getSimpleVariable().setValue(accountId);
	                    
	                    mySession.getVariable(IProjectVariables.CARD__NO).getSimpleVariable().setValue(cardNo);
	                    
	                    mySession.getVariable(IProjectVariables.LAST__NAME).getSimpleVariable().setValue(lastName);
	                    
	                    mySession.getVariable(IProjectVariables.EMAIL).getSimpleVariable().setValue(email);
	                    
	                    mySession.getVariable(IProjectVariables.PHONE).getSimpleVariable().setValue(phone);
	                    
	                    mySession.getVariable(IProjectVariables.GENDER).getSimpleVariable().setValue(gender);
	                    
	                    mySession.getVariable(IProjectVariables.USERNAME).getSimpleVariable().setValue(userName);
	                  
	                    
	                } else {
	                    tr.writeln(ITraceInfo.TRACE_LEVEL_WARN, "Não foi encontrado o primeiro nome na resposta da API");
	                }
	            } else {
	                tr.writeln(ITraceInfo.TRACE_LEVEL_WARN, "Não foi encontrado 'data' na resposta da API");
	            }
	            //se a resposta  do HTPP status for: 400
	        } else if (responseCode == HttpURLConnection.HTTP_BAD_REQUEST) {
	            
	        	tr.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "A solicitação POST não foi bem-sucedida. Código de resposta: " + responseCode);
	        	tr.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "O servidor rejeitou a solicitação devido a uma entrada incorreta.");
	        	
	        	//se a resposta  do HTPP status for: 404  
	        } else if (responseCode == HttpURLConnection.HTTP_NOT_FOUND) {
	            
	        	tr.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "A solicitação POST não foi bem-sucedida. Código de resposta: " + responseCode);
	        	tr.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "O recurso solicitado não foi encontrado no servidor.");
	            
	        } else {
	            
	        	tr.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "A solicitação POST não foi bem-sucedida. Código de resposta: " + responseCode);
	        	tr.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "A solicitação não pôde ser processada pelo servidor.");
	        }
	        
	    } catch (Exception e) {
	        tr.writeln(ITraceInfo.TRACE_LEVEL_ERROR, "Erro ao realizar a solicitude HTTP: " + e.getMessage());
	    }
	}
	

	/**
	 * Builds the list of branches that are defined for this servlet object.
	 * This list is built automatically by defining Goto nodes in the call flow editor.
	 * It is the programmer's responsibilty to provide at least one enabled Goto.<BR>
	 *
	 * The user should override updateBranches() to determine which Goto that the
	 * framework will activate.  If there is not at least one enabled Goto item, 
	 * the framework will throw a runtime exception.<BR>
	 *
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of branches for the flow item, override:
	 *     <code>updateBranches(Collection branches, SCESession mySession)</code>
	 *
	 * @return a Collection of <code>com.avaya.sce.runtime.Goto</code>
	 * objects that will be evaluated at runtime.  If there are no gotos
	 * defined in the Servlet node, then this returns null.
	 * Last generated by Orchestration Designer at: 20 DE MARÇO DE 2023 14H58MIN2S BRT
	 */
	public java.util.Collection getBranches(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Goto aGoto = null;
		list = new java.util.ArrayList(1);

		aGoto = new com.avaya.sce.runtime.Goto("checar_Nome", 0, true, "Default");
		list.add(aGoto);

		return list;
	}
}
